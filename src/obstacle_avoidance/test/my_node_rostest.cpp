/*
 * Created By: Valerian Ratu
 * Created On: January 29, 2017
 * Description: Integration testing for MyNode
 */


#include <MyNode.h>
#include <gtest/gtest.h>
#include <ros/ros.h>
#include <math.h>
#include <rosbag/bag.h>
#include <rosbag/view.h>
#include <boost/foreach.hpp>
#define foreach BOOST_FOREACH


/**
 * This is the helper class which will publish and subscribe messages which will test the node being instantiated
 * It contains at the minimum:
 *      publisher - publishes the input to the node
 *      subscriber - publishes the output of the node
 *      callback function - the callback function which corresponds to the subscriber
 *      getter function - to provide a way for gtest to check for equality of the message recieved
 */
class MyNodeTest : public testing::Test{
protected:
    virtual void SetUp(){
        test_publisher = nh_.advertise<sensor_msgs::LaserScan>("scan", 1);
        test_subscriber = nh_.subscribe("/my_node/publish_topic", 1, &MyNodeTest::callback, this);

        // Let the publishers and subscribers set itself up timely
        ros::Rate loop_rate(1);
        loop_rate.sleep();
    }

    ros::NodeHandle nh_;
    float angular_x;
    float angular_y;
    float angular_z;
    float linear_x;
    float linear_y;
    float linear_z;
    ros::Publisher test_publisher;
    ros::Subscriber test_subscriber;

public:

    void callback(const geometry_msgs::Twist::ConstPtr msg){
        angular_x = msg->angular.x;
        angular_y = msg->angular.y;
        angular_z = msg->angular.z;
        linear_x = msg->linear.x;
        linear_y = msg->linear.y;
        linear_z = msg->linear.z;
    }
};

TEST_F(MyNodeTest, overallROSTEST){

    // publishes "Hello" to the test node


    sensor_msgs::LaserScan ls ;



    ls.angle_min = -2.35619449615;
    ls.angle_max = 2.09234976768;
    ls.angle_increment= 0.00613592332229;
    ls.time_increment = 9.76562732831e-05;
    ls.scan_time = 0.10000000149;
    ls.range_min = 0.019999999553;
    ls.range_max = 5.59999990463;
    float range_mat[726] = {0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 0.006000000052154064, nanf(""), 0.006000000052154064, 0.006000000052154064, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 0.006000000052154064, nanf(""), nanf(""), nanf(""), nanf(""), 0.007000000216066837, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.9489998817443848, 2.7899999618530273, 2.7899999618530273, 2.7899999618530273, nanf(""), nanf(""), nanf(""), nanf(""), 2.687000036239624, 2.687000036239624, 2.687000036239624, nanf(""), nanf(""), nanf(""), 2.687000036239624, 2.687000036239624, 2.687000036239624, 2.694999933242798, 2.7090001106262207, 2.7109999656677246, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 1.7929999828338623, 1.7910000085830688, 1.774999976158142, 1.774999976158142, 1.774999976158142, 1.7769999504089355, 1.7829999923706055, nanf(""), nanf(""), nanf(""), nanf(""), 1.8600000143051147, 1.850000023841858, 1.850000023841858, 1.850000023841858, 1.850000023841858, 1.8530000448226929, 1.8580000400543213, nanf(""), nanf(""), nanf(""), 1.934000015258789, 1.9279999732971191, 1.9279999732971191, 1.9290000200271606, 1.9290000200271606, 1.934999942779541, 2.006999969482422, 2.006999969482422, 2.010999917984009, 2.006999969482422, 2.006999969482422, 2.010999917984009, 2.013000011444092, 2.0350000858306885, 2.121000051498413, 2.1080000400543213, 2.1080000400543213, 2.1080000400543213, 2.1080000400543213, 2.1080000400543213, 2.1110000610351562, 2.124000072479248, 2.187000036239624, 2.197000026702881, 2.197000026702881, 2.197000026702881, 2.197000026702881, 2.197000026702881, 2.197000026702881, 2.1989998817443848, nanf(""), nanf(""), nanf(""), 2.250999927520752, 2.246999979019165, 2.246000051498413, 2.243000030517578, 2.243000030517578, 2.243000030517578, 4.638000011444092, 0.007000000216066837, 4.638000011444092, 2.311000108718872, 2.309999942779541, 2.306999921798706, 2.306999921798706, 2.306999921798706, 4.438000202178955, 0.007000000216066837, nanf(""), nanf(""), nanf(""), 2.316999912261963, 2.311000108718872, 2.309999942779541, 2.309999942779541, 2.309999942779541, 2.309999942779541, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.3320000171661377, 2.3310000896453857, 2.3299999237060547, 2.3299999237060547, 2.3299999237060547, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.36899995803833, 2.36899995803833, 2.36899995803833, 2.369999885559082, 2.374000072479248, 2.374000072479248, 2.369999885559082, 2.305000066757202, 2.296999931335449, 2.296999931335449, 2.2960000038146973, 2.2960000038146973, 2.296999931335449, nanf(""), nanf(""), nanf(""), 2.259000062942505, 2.25, 2.25, 2.25, 2.250999927520752, nanf(""), nanf(""), nanf(""), 2.1989998817443848, 2.194999933242798, 2.194999933242798, 2.194999933242798, 2.194999933242798, 2.1989998817443848, nanf(""), nanf(""), nanf(""), 2.1429998874664307, 2.1419999599456787, 2.1410000324249268, 2.1410000324249268, 2.1410000324249268, 2.1410000324249268, 2.1410000324249268, nanf(""), nanf(""), nanf(""), 2.1050000190734863, 2.0969998836517334, 2.0950000286102295, 2.0950000286102295, 2.0969998836517334, 2.1089999675750732, nanf(""), nanf(""), nanf(""), 2.065999984741211, 2.055000066757202, 2.0510001182556152, 2.0490000247955322, 2.0490000247955322, 2.0490000247955322, 2.055000066757202, 2.1619999408721924, 2.177000045776367, 2.2880001068115234, 2.2990000247955322, 2.371000051498413, 2.4170000553131104, 2.5160000324249268, 2.5269999504089355, 2.5399999618530273, 2.5480000972747803, 2.553999900817871, 2.6559998989105225, 2.6649999618530273, 2.6649999618530273, 2.6740000247955322, 2.680999994277954, 2.694999933242798, 2.7690000534057617, 2.9010000228881836, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 0.007000000216066837, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 3.072999954223633, 3.0339999198913574, 2.9010000228881836, 2.757999897003174, 2.694999933242798, 2.6740000247955322, 2.6730000972747803, 2.6730000972747803, 2.578000068664551, 2.562999963760376, 2.562000036239624, 2.553999900817871, 2.5510001182556152, 2.4679999351501465, 2.434000015258789, 2.306999921798706, 2.2070000171661377, 2.078000068664551, 2.0490000247955322, 2.0450000762939453, 2.0429999828338623, 2.0429999828338623, 2.0439999103546143, 2.0450000762939453, 2.0480000972747803, nanf(""), nanf(""), nanf(""), 2.0840001106262207, 2.0799999237060547, 2.0739998817443848, 2.0739998817443848, 2.0739998817443848, 2.0759999752044678, 2.0889999866485596, nanf(""), nanf(""), nanf(""), 2.117000102996826, 2.115999937057495, 2.115999937057495, 2.115999937057495, 2.115000009536743, 2.115000009536743, 2.115000009536743, 2.1510000228881836, 2.1570000648498535, 2.1570000648498535, 2.1510000228881836, 2.1489999294281006, 2.1470000743865967, 2.1470000743865967, 2.1470000743865967, 2.1489999294281006, 2.1489999294281006, 2.1489999294281006, 2.197000026702881, 2.203000068664551, 2.197000026702881, 2.197000026702881, 2.197000026702881, 2.197000026702881, 2.197000026702881, 2.200000047683716, 2.2690000534057617, 2.2690000534057617, 2.2690000534057617, 2.2669999599456787, 2.2669999599456787, 2.260999917984009, 2.2669999599456787, 2.2699999809265137, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.2119998931884766, 2.2119998931884766, 2.2090001106262207, 2.2119998931884766, 2.2119998931884766, 2.2119998931884766, 2.2200000286102295, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.174999952316284, 2.1730000972747803, 2.1659998893737793, 2.1659998893737793, 2.1600000858306885, 2.1600000858306885, 2.1600000858306885, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.1570000648498535, 2.140000104904175, 2.13100004196167, 2.13100004196167, 2.13100004196167, 2.131999969482422, 2.1419999599456787, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.130000114440918, 2.121999979019165, 2.121000051498413, 2.119999885559082, 2.119999885559082, 2.11899995803833, 2.11899995803833, 2.119999885559082, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.1449999809265137, 2.115999937057495, 2.114000082015991, 2.111999988555908, 2.1059999465942383, 2.1059999465942383, 2.1080000400543213, 2.111999988555908, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 2.124000072479248, 2.121000051498413, 2.119999885559082, 2.11899995803833, 2.11899995803833, 2.11899995803833, 2.119999885559082, 2.11899995803833, 2.111999988555908, 2.068000078201294, 2.065999984741211, 2.065999984741211, 2.068000078201294, 2.068000078201294, 2.068000078201294, 2.075000047683716, 2.075000047683716, 2.055000066757202, 2.013000011444092, 2.013000011444092, 2.009999990463257, 2.005000114440918, 2.005000114440918, 2.003999948501587, 2.002000093460083, 1.9739999771118164, 1.3289999961853027, 1.3240000009536743, 1.3240000009536743, 1.3240000009536743, 1.3760000467300415, 1.9520000219345093, 1.9539999961853027, 1.9620000123977661, 1.9620000123977661, 1.9700000286102295, nanf(""), nanf(""), nanf(""), 1.9270000457763672, 1.9259999990463257, 1.9190000295639038, 1.9079999923706055, 1.9079999923706055, 1.9079999923706055, 1.909999966621399, 1.9170000553131104, nanf(""), nanf(""), nanf(""), 1.8940000534057617, 1.8860000371932983, 1.8819999694824219, 1.8819999694824219, 1.8819999694824219, 1.8819999694824219, 1.8849999904632568, 1.8919999599456787, 4.760000228881836, 4.761000156402588, 4.761000156402588, 4.761000156402588, 4.742000102996826, 4.738999843597412, 4.728000164031982, 4.7210001945495605, 4.7170000076293945, 4.709000110626221, 4.705999851226807, 4.703999996185303, 4.671999931335449, 4.669000148773193, 4.669000148773193, 4.669000148773193, 4.663000106811523, 4.656000137329102, 4.656000137329102, 4.656000137329102, 4.656000137329102, 4.656000137329102, 4.656000137329102, 4.618000030517578, 4.613999843597412, 4.605999946594238, 4.603000164031982, 4.599999904632568, 4.603000164031982, 4.605999946594238, nanf(""), nanf(""), nanf(""), nanf(""), 4.604000091552734, 4.598999977111816, 4.598999977111816, 4.598999977111816, 4.598999977111816, 4.598999977111816, 4.603000164031982, 4.605999946594238, 4.610000133514404, 4.610000133514404, 4.611999988555908, 4.617000102996826, 4.624000072479248, 4.624000072479248, nanf(""), nanf(""), nanf(""), 4.619999885559082, 4.609000205993652, 4.609000205993652, 4.619999885559082, 4.627999782562256, 4.65500020980835, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 3.7279999256134033, 3.7279999256134033, 3.7230000495910645, 3.7230000495910645, 3.7279999256134033, 3.734999895095825, 3.744999885559082, 3.753999948501587, 3.7799999713897705, 3.7960000038146973, 3.816999912261963, 3.816999912261963, 3.8299999237060547, 3.8299999237060547, 3.8299999237060547, 3.8429999351501465, nanf(""), nanf(""), nanf(""), 0.007000000216066837, nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), nanf(""), 0.6150000095367432, 0.6140000224113464, 0.6140000224113464, 0.6140000224113464};


    ls.ranges.resize(726);


    for(int k = 0; k<726; k++){
        ls.ranges[k] = range_mat[k];
    }


    test_publisher.publish(ls);

// Wait for the message to get passed around
    ros::Rate loop_rate(1);
    loop_rate.sleep();

    // spinOnce allows ros to actually procmy_node.dir/src/MyNode.cpp.o: In functess your callbacks
    // for the curious: http://answers.ros.org/question/11887/significance-of-rosspinonce/
    ros::spinOnce();

    EXPECT_FLOAT_EQ(0.0, linear_x);
    EXPECT_FLOAT_EQ(0.0, linear_y);
    EXPECT_FLOAT_EQ(0.0, linear_z);
    EXPECT_FLOAT_EQ(0.0, angular_x);
    EXPECT_FLOAT_EQ(0.0, angular_y);
    EXPECT_FLOAT_EQ(0.01, angular_z);


}




int main(int argc, char **argv) {
    // !! Don't forget to initialize ROS, since this is a test within the ros framework !!
    ros::init(argc, argv, "my_node_rostest");
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}