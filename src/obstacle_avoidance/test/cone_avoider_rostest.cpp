/*
 * Created By: Valerian Ratu
 * Created On: January 29, 2017
 * Modified By: Marinah Zhao
 * Modified On: March 10, 2018
 * Description: Integration testing for ConeAvoider
 */


#include <ConeAvoider.h>
#include <gtest/gtest.h>
#include <ros/ros.h>

/**
 * This is the helper class which will publish and subscribe messages which will test the node being instantiated
 * It contains at the minimum:
 *      publisher - publishes the input to the node
 *      subscriber - publishes the output of the node
 *      callback function - the callback function which corresponds to the subscriber
 *      getter function - to provide a way for gtest to check for equality of the message received
 */
class ConeAvoiderTest : public testing::Test{
protected:
    virtual void SetUp(){
        test_publisher = nh_.advertise<sensor_msgs::LaserScan>("scan", 1);
        test_subscriber = nh_.subscribe("/cmd_vel", 1, &ConeAvoiderTest::callback, this); //cone_avoider/

        // Let the publishers and subscribers set itself up timely
        ros::Rate loop_rate(1);
        loop_rate.sleep();
        twist_output.linear.x = 10;

    }

    ros::NodeHandle nh_;
    geometry_msgs::Twist twist_output;
    float num;
    ros::Publisher test_publisher;
    ros::Subscriber test_subscriber;

public:

    void callback(geometry_msgs::Twist::Ptr twist){
        twist_output = *twist;
    }
};

TEST_F(ConeAvoiderTest, middleHoleTwistMsgAfterLidarData) {

    // publishes a lidar scan to the test node
    sensor_msgs::LaserScan scan_msg;
    scan_msg.header.seq = 0;
    ros::Time time(1507411486);
    scan_msg.header.stamp = time;
    scan_msg.header.frame_id = "laser";
    scan_msg.angle_min = -2.4;
    scan_msg.angle_max = 2.1;
    scan_msg.angle_increment = 0.006;
    scan_msg.range_min = 0.02;
    scan_msg.range_max = 5.9;
    const float ranges_arr[] = {2.11, NAN, 8.0, 0.01, 4.5, 1.99};
    std::vector<float> ranges( ranges_arr, ranges_arr + sizeof( ranges_arr ) / sizeof( ranges_arr[0] ) );
    scan_msg.ranges = ranges;

    test_publisher.publish(scan_msg);

    // Wait for the message to get passed around
    ros::Rate loop_rate(1);
    loop_rate.sleep();

    // spinOnce allows ros to actually process your callbacks
    // for the curious: http://answers.ros.org/question/11887/significance-of-rosspinonce/
    ros::spinOnce();

    EXPECT_EQ(0, twist_output.linear.y);
    EXPECT_EQ(0, twist_output.linear.z);
    EXPECT_EQ(0, twist_output.angular.x);
    EXPECT_EQ(0, twist_output.angular.y);

    EXPECT_EQ(0.6, twist_output.linear.x);
    EXPECT_NEAR(-3.1083, twist_output.angular.z, 0.0001);

}

TEST_F(ConeAvoiderTest, leftHoleTwistMsgAfterLidarData){

    // publishes a lidar scan to the test node
    sensor_msgs::LaserScan scan_msg;
    scan_msg.header.seq = 0;
    ros::Time time(1507411486);
    scan_msg.header.stamp = time;
    scan_msg.header.frame_id = "laser";
    scan_msg.angle_min = -2.4;
    scan_msg.angle_max = 2.1;
    scan_msg.angle_increment = 0.006;
    scan_msg.range_min = 0.02;
    scan_msg.range_max = 5.9;
    float ranges_arr[6] = {NAN, 6, 0.01, 4.3, NAN, 2.0};
    std::vector<float> ranges (ranges_arr, ranges_arr + sizeof(ranges_arr) / sizeof(ranges_arr[0]) );
    scan_msg.ranges = ranges;


    test_publisher.publish(scan_msg);

    // Wait for the message to get passed around
    ros::Rate loop_rate(1);
    loop_rate.sleep();

    // spinOnce allows ros to actually process your callbacks
    // for the curious: http://answers.ros.org/question/11887/significance-of-rosspinonce/
    ros::spinOnce();

    EXPECT_EQ(0, twist_output.linear.y);
    EXPECT_EQ(0, twist_output.linear.z);
    EXPECT_EQ(0, twist_output.angular.x);
    EXPECT_EQ(0, twist_output.angular.y);

    EXPECT_EQ(0.6, twist_output.linear.x);
    EXPECT_NEAR(-3.1083, twist_output.angular.z, 0.0001);
}

TEST_F(ConeAvoiderTest, rightHoleTwistMsgAfterLidarData) {

    // publishes a lidar scan to the test node
    sensor_msgs::LaserScan scan_msg;
    scan_msg.header.seq = 0;
    ros::Time time(1507411486);
    scan_msg.header.stamp = time;
    scan_msg.header.frame_id = "laser";
    scan_msg.angle_min = -2.4;
    scan_msg.angle_max = 2.1;
    scan_msg.angle_increment = 0.006;
    scan_msg.range_min = 0.02;
    scan_msg.range_max = 5.9;
    float ranges_arr[6] = {4.5, NAN, 2.11, NAN, 0.018, NAN};
    std::vector<float> ranges (ranges_arr, ranges_arr + sizeof(ranges_arr) / sizeof(ranges_arr[0]) );
    scan_msg.ranges = ranges;


    test_publisher.publish(scan_msg);

    // Wait for the message to get passed around
    ros::Rate loop_rate(1);
    loop_rate.sleep();

    // spinOnce allows ros to actually process your callbacks
    // for the curious: http://answers.ros.org/question/11887/significance-of-rosspinonce/
    ros::spinOnce();

    EXPECT_EQ(0, twist_output.linear.y);
    EXPECT_EQ(0, twist_output.linear.z);
    EXPECT_EQ(0, twist_output.angular.x);
    EXPECT_EQ(0, twist_output.angular.y);

    EXPECT_EQ(0.6, twist_output.linear.x);
    EXPECT_NEAR(-3.0927, twist_output.angular.z, 0.0001);
}

TEST_F(ConeAvoiderTest, noHoleTwistMsgAfterLidarData){

    // publishes a lidar scan to the test node
    sensor_msgs::LaserScan scan_msg;
    scan_msg.header.seq = 0;
    ros::Time time(1507411486);
    scan_msg.header.stamp = time;
    scan_msg.header.frame_id = "laser";
    scan_msg.angle_min = -2.4;
    scan_msg.angle_max = 2.1;
    scan_msg.angle_increment = 0.006;
    scan_msg.range_min = 0.02;
    scan_msg.range_max = 5.9;
    float ranges_arr[6] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    std::vector<float> ranges (ranges_arr, ranges_arr + sizeof(ranges_arr) / sizeof(ranges_arr[0]) );
    scan_msg.ranges = ranges;

    test_publisher.publish(scan_msg);

    // Wait for the message to get passed around
    ros::Rate loop_rate(1);
    loop_rate.sleep();

    // spinOnce allows ros to actually process your callbacks
    // for the curious: http://answers.ros.org/question/11887/significance-of-rosspinonce/
    ros::spinOnce();

    EXPECT_EQ(0, twist_output.linear.y);
    EXPECT_EQ(0, twist_output.linear.z);
    EXPECT_EQ(0, twist_output.angular.x);
    EXPECT_EQ(0, twist_output.angular.y);

    EXPECT_EQ(0.1, twist_output.linear.x);
    EXPECT_EQ(0, twist_output.angular.z);
}

int main(int argc, char **argv) {
    // !! Don't forget to initialize ROS, since this is a test within the ros framework !!
    ros::init(argc, argv, "cone_avoider_rostest");
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

//
//header:
//    seq: 4047
//    stamp:
//        secs: 1507411486
//        nsecs: 640017189
//    frame_id: "laser"
//angle_min: -2.35619449615
//angle_max: 2.09234976768
//angle_increment: 0.00613592332229
//time_increment: 9.76562732831e-05
//scan_time: 0.10000000149
//range_min: 0.019999999553
//range_max: 5.59999990463
//ranges: [0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, nan, nan, nan, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, nan, nan, nan, nan, nan, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, nan, nan, 0.007000000216066837, nan, nan, nan, nan, nan, nan, nan, 2.934999942779541, 2.7720000743865967, 2.7720000743865967, 2.7720000743865967, nan, nan, nan, nan, 2.6679999828338623, 2.6679999828338623, 2.6679999828338623, nan, nan, nan, 2.6689999103546143, 2.6689999103546143, 2.6689999103546143, 2.691999912261963, 2.697000026702881, 2.697000026702881, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, 1.784999966621399, 1.7710000276565552, 1.7710000276565552, 1.7699999809265137, 1.7610000371932983, 1.7699999809265137, 1.7719999551773071, nan, nan, nan, nan, 1.840000033378601, 1.8300000429153442, 1.8300000429153442, 1.8300000429153442, 1.840000033378601, 1.8450000286102295, 1.86899995803833, 1.9420000314712524, 1.9420000314712524, 1.9420000314712524, 1.9190000295639038, 1.9170000553131104, 1.9170000553131104, 1.906999945640564, 1.906999945640564, 1.9210000038146973, 1.9800000190734863, 1.9900000095367432, 1.9989999532699585, 1.9900000095367432, 1.9900000095367432, 1.9910000562667847, 1.996000051498413, 1.996000051498413, 2.0380001068115234, 2.0940001010894775, 2.1010000705718994, 2.1010000705718994, 2.0969998836517334, 2.0969998836517334, 2.1010000705718994, 2.118000030517578, 2.181999921798706, 2.181999921798706, 2.183000087738037, 2.183000087738037, 2.181999921798706, 2.183000087738037, 0.007000000216066837, nan, nan, nan, nan, nan, 2.2290000915527344, 2.2290000915527344, 2.2239999771118164, 2.2290000915527344, 2.2320001125335693, 4.614999771118164, 0.007000000216066837, 4.614999771118164, 2.2950000762939453, 2.2939999103546143, 2.2880001068115234, 2.2880001068115234, 2.2939999103546143, 4.440000057220459, 0.007000000216066837, nan, nan, nan, 2.296999931335449, 2.2909998893737793, 2.2890000343322754, 2.2909998893737793, 2.2920000553131104, 2.2920000553131104, nan, nan, nan, nan, nan, 2.3320000171661377, 2.3310000896453857, 2.3239998817443848, 2.315000057220459, 2.3239998817443848, 2.3239998817443848, nan, nan, nan, nan, nan, nan, nan, 2.3519999980926514, 2.3519999980926514, 2.3489999771118164, 2.3519999980926514, 2.3580000400543213, 2.3580000400543213, 2.3420000076293945, 2.2839999198913574, 2.2839999198913574, 2.2839999198913574, 2.2839999198913574, 2.2880001068115234, 2.2929999828338623, nan, nan, nan, 2.2309999465942383, 2.2309999465942383, 2.2309999465942383, 2.239000082015991, 2.244999885559082, nan, nan, nan, 2.187999963760376, 2.1760001182556152, 2.174999952316284, 2.1760001182556152, 2.1760001182556152, 2.190000057220459, nan, nan, nan, 2.13700008392334, 2.13700008392334, 2.13700008392334, 2.13700008392334, 2.131999969482422, 2.138000011444092, 2.138000011444092, nan, nan, nan, 2.0920000076293945, 2.0910000801086426, 2.0869998931884766, 2.0869998931884766, 2.0910000801086426, 2.0999999046325684, nan, nan, nan, 2.053999900817871, 2.0339999198913574, 2.0290000438690186, 2.0290000438690186, 2.0290000438690186, 2.0290000438690186, 2.053999900817871, 2.1419999599456787, 2.1510000228881836, 2.2790000438690186, 2.2839999198913574, 2.3550000190734863, 2.3889999389648438, 2.50600004196167, 2.515000104904175, 2.5250000953674316, 2.5329999923706055, 2.5390000343322754, 2.6500000953674316, 2.6559998989105225, 2.6559998989105225, 2.6579999923706055, 2.6579999923706055, 2.6579999923706055, 2.765000104904175, 2.884999990463257, nan, nan, nan, nan, nan, nan, nan, 0.007000000216066837, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, 3.0899999141693115, 3.00600004196167, 2.88700008392334, 2.759000062942505, 2.680000066757202, 2.6760001182556152, 2.6670000553131104, 2.6619999408721924, 2.549999952316284, 2.5460000038146973, 2.5429999828338623, 2.5390000343322754, 2.5380001068115234, 2.4639999866485596, 2.4110000133514404, 2.312999963760376, 2.1670000553131104, 2.066999912261963, 2.0339999198913574, 2.0339999198913574, 2.0329999923706055, 2.0329999923706055, 2.0339999198913574, 2.0380001068115234, 2.0439999103546143, nan, nan, nan, 2.0789999961853027, 2.071000099182129, 2.061000108718872, 2.061000108718872, 2.061000108718872, 2.063999891281128, 2.0769999027252197, nan, nan, nan, 2.1059999465942383, 2.1059999465942383, 2.0940001010894775, 2.0940001010894775, 2.0940001010894775, 2.0959999561309814, 2.1080000400543213, 2.1389999389648438, 2.1410000324249268, 2.1410000324249268, 2.1389999389648438, 2.1389999389648438, 2.13700008392334, 2.13700008392334, 2.13700008392334, 2.13700008392334, 2.13700008392334, 2.187999963760376, 2.194000005722046, 2.194000005722046, 2.190999984741211, 2.187999963760376, 2.186000108718872, 2.180999994277954, 2.180999994277954, 2.186000108718872, 2.260999917984009, 2.260999917984009, 2.260999917984009, 2.253999948501587, 2.253999948501587, 2.246000051498413, 2.246000051498413, 2.253999948501587, nan, nan, nan, nan, nan, 2.2119998931884766, 2.2079999446868896, 2.2019999027252197, 2.2019999027252197, 2.2009999752044678, 2.2009999752044678, 2.2009999752044678, nan, nan, nan, nan, nan, nan, 2.1679999828338623, 2.1610000133514404, 2.1610000133514404, 2.1610000133514404, 2.1449999809265137, 2.1449999809265137, 2.1670000553131104, nan, nan, nan, nan, nan, nan, 2.130000114440918, 2.125999927520752, 2.124000072479248, 2.121000051498413, 2.115000009536743, 2.115000009536743, 2.121000051498413, nan, nan, nan, nan, nan, nan, 2.1040000915527344, 2.1040000915527344, 2.1029999256134033, 2.1040000915527344, 2.1059999465942383, 2.1059999465942383, 2.1059999465942383, 2.1110000610351562, nan, nan, nan, nan, nan, 2.1010000705718994, 2.1010000705718994, 2.0950000286102295, 2.0950000286102295, 2.0980000495910645, 2.0980000495910645, 2.1010000705718994, 2.109999895095825, nan, nan, nan, nan, nan, 2.1110000610351562, 2.1110000610351562, 2.109999895095825, 2.109999895095825, 2.109999895095825, 2.109999895095825, 2.109999895095825, 2.1059999465942383, 2.0880000591278076, 2.068000078201294, 2.065999984741211, 2.058000087738037, 2.058000087738037, 2.056999921798706, 2.055999994277954, 2.055999994277954, 2.055999994277954, 2.049999952316284, 2.005000114440918, 1.9980000257492065, 1.996999979019165, 1.996000051498413, 1.9950000047683716, 1.9930000305175781, 1.9889999628067017, 1.9609999656677246, 1.3049999475479126, 1.3040000200271606, 1.3040000200271606, 1.3049999475479126, 1.3650000095367432, 1.9390000104904175, 1.9470000267028809, 1.9470000267028809, 1.9470000267028809, 1.9539999961853027, nan, nan, nan, 1.909999966621399, 1.909999966621399, 1.9010000228881836, 1.8990000486373901, 1.9010000228881836, 1.8990000486373901, 1.8990000486373901, 1.9110000133514404, 1.9110000133514404, 1.8899999856948853, 1.8899999856948853, 1.8819999694824219, 1.8799999952316284, 1.8660000562667847, 1.8660000562667847, 1.8660000562667847, 1.8660000562667847, 1.871999979019165, 1.8760000467300415, 4.709000110626221, 4.736999988555908, 4.74399995803833, 4.736999988555908, 4.709000110626221, 4.705999851226807, 4.705999851226807, 4.705999851226807, 4.714000225067139, 4.714000225067139, 4.714000225067139, 4.676000118255615, 4.676000118255615, 4.672999858856201, 4.665999889373779, 4.6519999504089355, 4.650000095367432, 4.646999835968018, 4.646999835968018, 4.646999835968018, 4.646999835968018, 4.625999927520752, 4.61899995803833, 4.61899995803833, 4.599999904632568, 4.598999977111816, 4.598999977111816, 4.598999977111816, 4.599999904632568, 4.60099983215332, nan, nan, nan, nan, 4.5929999351501465, 4.5920000076293945, 4.585000038146973, 4.585000038146973, 4.585000038146973, 4.585000038146973, 4.590000152587891, 4.59499979019165, 4.599999904632568, 4.599999904632568, 4.599999904632568, 4.598999977111816, 4.598999977111816, 4.598999977111816, nan, nan, nan, 4.61899995803833, 4.611999988555908, 4.611999988555908, 4.611999988555908, 4.61899995803833, 4.622000217437744, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, 0.007000000216066837, nan, 0.007000000216066837, nan, nan, nan, nan, nan, nan, nan, nan, 3.7249999046325684, 3.7230000495910645, 3.7219998836517334, 3.7230000495910645, 3.7249999046325684, 3.7330000400543213, 3.73799991607666, 3.746000051498413, 3.7839999198913574, 3.7880001068115234, 3.805999994277954, 3.816999912261963, 3.8310000896453857, 3.825000047683716, 3.825000047683716, 3.8310000896453857, nan, nan, nan, 0.007000000216066837, nan, nan, nan, nan, 3.9700000286102295, 3.9609999656677246, 3.9570000171661377, 3.9609999656677246, 3.9639999866485596, 3.9639999866485596]
//intensities: []
